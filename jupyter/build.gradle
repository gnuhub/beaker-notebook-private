import org.apache.tools.ant.taskdefs.condition.Os

def final nbextensionsGit = "https://github.com/ipython-contrib/jupyter_contrib_nbextensions.git"
def final nbextensionsFolderName = "nbextensions"
def final beakerLinkName = "beaker"
def final beakerNbextensionFolder = "beaker-nbextension"
def final PYTHONPATH = "beaker"

task installNbextensions() {
  doLast {
    println "Installing bextensions"
    def folder = new File('jupyter_contrib_nbextensions')
    if (!folder.exists()) {
      def out = new ByteArrayOutputStream()
      exec {
        commandLine "git",
         "clone",
         nbextensionsGit;
        standardOutput = out
      }
      println out.toString().trim()
    } else {
      println "jupyter_contrib_nbextensions already exists!"
    }

    def out = new ByteArrayOutputStream()
    exec {
      workingDir 'jupyter_contrib_nbextensions'
      commandLine "pip",
        "install",
        ".";
      standardOutput = out
    }
    println out.toString().trim();

    out = new ByteArrayOutputStream()
    exec {
      workingDir 'jupyter_contrib_nbextensions'
      commandLine "jupyter",
        "contrib",
        "nbextension",
        "install",
        "--user";
      standardOutput = out
    }
    println out.toString().trim()
  }
}

task linkBeakerNbextension(dependsOn: 'installNbextensions') {
  doLast {
    def out = new ByteArrayOutputStream()
    exec {
      commandLine "jupyter", "--data-dir";
      standardOutput = out
    }
    def jupyterFolder = out.toString().trim() + '//' + nbextensionsFolderName + "//" + beakerLinkName
    def from = new File(jupyterFolder).getAbsolutePath()
    def to = new File(beakerNbextensionFolder).getAbsolutePath()

    if (!java.nio.file.Files.isSymbolicLink(new File(from).toPath())) {
      println "Creating symbolic link:"
      println "from = " + from
      println "to = " + to
      java.nio.file.Files.createSymbolicLink(new File(from).toPath(), new File(to).toPath())
    } else {
      println "Symbolic link lready present, should be like this:"
      println "from = " + from
      println "to = " + to
    }
    project('beaker-nbextension').tasks.install.execute()
  }
}

task environmentVariables(dependsOn: 'linkBeakerNbextension') {
  doLast {
    if (!System.getenv("PYTHONPATH")) {
      println "You should define environment variables PYTHONPATH"
      println "please define it like so:"
      if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        println "set PYTHONPATH=" + new File(PYTHONPATH).getAbsolutePath()
      } else if (Os.isFamily(Os.FAMILY_MAC) || Os.isFamily(Os.FAMILY_UNIX)) {
        println "export PYTHONPATH=" + new File(PYTHONPATH).getAbsolutePath()
      }
    } else {
      println "PYTHONPATH already defined"
      println "PYTHONPATH now set to:"
      println "PYTHONPATH=" + System.getenv("PYTHONPATH")
      println "PYTHONPATH should be:"
      println "PYTHONPATH=" + new File(PYTHONPATH).getAbsolutePath()
    }
  }
}