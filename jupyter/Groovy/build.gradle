apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'jacoco'

def final kernelIdName = 'groovy'
def final toReplace = '__PATH__'

mainClassName = 'org.lappsgrid.jupyter.groovy.GroovyKernel'
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

configurations {
  antlr
}

compileJava {
  options.compilerArgs << '-XDignore.symbol.file'
  options.fork = true
  options.forkOptions.executable = 'javac'
}

repositories {
  mavenCentral()
}

dependencies {

  compile group: "org.codehaus.groovy", name: "groovy-all", version : "2.4.3"
  compile group: "org.zeromq", name: "jeromq", version : "0.3.5"
  compile group: "commons-codec", name: "commons-codec", version : "1.9"
  compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.22'
  compile group: 'com.github.lwhite1', name:'tablesaw', version: '0.7.6.4'
  compile group: 'org.antlr', name: 'antlr4-runtime', version: '4.5'
  compile group: 'org.antlr', name :'antlr4', version: '4.5'
  compile group: 'com.google.guava', name: 'guava', version: '18.0'
  compile group: 'org.apache.httpcomponents', name: 'fluent-hc', version: '4.5.1'
  compile group: 'com.google.inject', name: 'guice', version: '3.0'
  compile group: 'org.antlr', name: 'antlr4-runtime', version: '4.5'
  antlr group : 'org.antlr', name :'antlr4', version: '4.5'

  testCompile group: 'junit', name: 'junit', version: '4.11'
  testCompile group: 'org.assertj', name: 'assertj-core', version: '3.6.1'
  testCompile group: 'org.reflections', name: 'reflections', version: '0.9.10'
}

task antlr4_groovy_lexer(type: JavaExec) {
    main = "org.antlr.v4.Tool"
    workingDir = "src/main/antlr4/"
    args = ["GroovyLexer.g4", "-o", "../java/com/twosigma/beaker/groovy/autocomplete","-listener", "-no-visitor", "-package", "com.twosigma.beaker.groovy.autocomplete", "-encoding", "UTF-8" ]
    classpath =  configurations.antlr
}
task antlr4_groovy_parser(type: JavaExec) {
    main = "org.antlr.v4.Tool"
    workingDir = "src/main/antlr4/"
    args = ["GroovyParser.g4", "-o", "../java/com/twosigma/beaker/groovy/autocomplete","-listener", "-no-visitor", "-package", "com.twosigma.beaker.groovy.autocomplete", "-encoding", "UTF-8" ]
    classpath =  configurations.antlr
}
compileJava.dependsOn antlr4_groovy_lexer
compileJava.dependsOn antlr4_groovy_parser

jar {
  manifest { 
    attributes "Main-Class": "$mainClassName"
  }  

  from {
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  } {
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
  }
}

task prepareJson(dependsOn: 'build'){
  doLast {
    println "Prepare JSON for Jupyter notebook"
    println "Copy kernel.json to build/libs/json/ and replasing PATH with Groovy.jar parh"
    
    def jarLocation = new File('build/libs/Groovy.jar').getAbsolutePath()
    jarLocation = jarLocation.replace("\\","/");
    def text = new File('kernel.json').text.replace(toReplace, jarLocation)
    def folder = new File('build/libs/json')
    if( !folder.exists() ) {
      println "Creating folder build/libs/json"
      folder.mkdirs()
      }
    
    new File('build/libs/json/kernel.json').withWriter { w ->
      w << text
    }
  }
}

task kernelInstall(dependsOn: 'prepareJson'){
  doLast {
    println "Installing Groovier to jupyter totebook"
    
    def hashStdOut = new ByteArrayOutputStream()
    def jsonFolder = new File('build/libs/json/').getAbsolutePath();
    exec {
      commandLine "jupyter",
        "kernelspec",
        "install",
        "--user",
        "--replace",
        "--name",
        kernelIdName,
        jsonFolder;
      standardOutput = hashStdOut
    }
    println hashStdOut.toString().trim();
    println "DONE"
  }
}

jacoco {
  toolVersion = "0.7.8"
}

jacocoTestReport {
  reports {
    html.enabled = true
    xml.enabled = false
    csv.enabled = false
  }
}

task realclean
realclean.dependsOn(clean)
// should also remove
// GroovyLexer.java GroovyLexer.tokens GroovyParser.java GroovyParser.tokens
// GroovyParserBaseListener.java GroovyParserListener.java

test.finalizedBy jacocoTestReport

