/*
 *  Copyright 2017 TWO SIGMA OPEN SOURCE, LLC
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'cpp'

def final kernelIdName = 'cpp'
def final toReplace = '__PATH__'

mainClassName = 'com.twosigma.beaker.cpp.CppKernel'

configurations {
  antlr
}

repositories {
  mavenCentral()
}



def osName = System.properties['os.name']
def mac = false
def win = false
def linux = false
def platform = ''
if (osName.startsWith('Mac')) {
  mac = true
  platform = 'darwin'
} else if (osName.startsWith('Windows')) {
  win = true
  platform = 'win32'
} else if (osName.startsWith('Linux')) {
  linux = true
  platform = 'linux'
}

def java_home = "";
if (mac){
  java_home =  System.properties.'java.home';
} else if (linux){
  java_home = System.properties.'java.home'; //"readlink -f /usr/bin/javah".execute().text.trim()[0..-11];
}

task makeCRunLib(type: Exec, dependsOn: ['compileCppKernel', 'makeCppKernelHeader']) {
  inputs.file('./src/main/cpp/CRun.cpp')
  outputs.file('./src/main/cpp/libCRun.jnilib')
  workingDir './src/main/cpp'
  if (mac){
    commandLine 'clang++', '-m64', '-shared', '-fPIC', '--std=c++11', '-I', "${java_home}/../include", '-I', "${java_home}/../include/darwin", '-o', 'libCRun.jnilib', 'CRun.cpp'
  } else if (linux) {
    commandLine 'clang++', '-m64', '-shared', '-fPIC', '--std=c++11', '-I', "${java_home}/../include", '-I', "${java_home}/../include/linux", '-o', 'libCRun.jnilib', 'CRun.cpp'
  }
}

//task copyBeakerHeader(type: Copy) {
//  from './src/main/cpp/beaker.hpp'
//  into evalPluginDir.getAbsolutePath() + '/cpp/include'
//}

//task copyCRun(type: Copy, dependsOn: ['installDist', 'makeCRunLib', 'copyBeakerHeader']) {
//  from './src/main/cpp/libCRun.jnilib'
//  into evalPluginDir.getAbsolutePath() + '/cpp/lib'
//}

task compileCppKernel(type: JavaCompile) {
  classpath = files(project(':kernel:base').projectDir)
  source 'com.twosigma.beaker.cpp.CppKernel'
}

task makeCppKernelHeader(type: Exec, dependsOn: compileCppKernel) {
  workingDir './build/classes/main'
  def jvmDir = project(':kernel:base').projectDir
  commandLine 'javah', '-cp', "./:${jvmDir}/build/classes/main", '-jni', '-o', '../../../src/main/cpp/CppKernel.h', 'com.twosigma.beaker.cpp.CppKernel'
}

dependencies {
  compile project(':kernel:base')
  compile group: 'org.abstractmeta', name: 'compilation-toolbox', version: '0.3.2'
  compile group: 'jline', name: 'jline', version: '2.12'
  compile group: 'org.antlr', name: 'antlr4-runtime', version: '4.5'
  antlr group: 'org.antlr', name: 'antlr4', version: '4.5'

  testCompile project(':kernel:base').sourceSets.test.output
  testCompile group: 'junit', name: 'junit', version: '4.11'
  testCompile group: 'org.assertj', name: 'assertj-core', version: '3.6.1'
  testCompile group: 'org.reflections', name: 'reflections', version: '0.9.10'
}

task antlr4_java(type: JavaExec) {
  main = "org.antlr.v4.Tool"
  workingDir = "src/main/antlr4/"
  args = ["CPP14.g4", "-o", "../java/com/twosigma/beaker/cpp/autocomplete","-listener", "-no-visitor", "-package", "com.twosigma.beaker.cpp.autocomplete", "-encoding", "UTF-8" ]
  classpath =  configurations.antlr
}

compileJava.dependsOn antlr4_java
compileJava.dependsOn compileCppKernel

compileJava {
  options.compilerArgs << '-Xlint:deprecation'
  options.compilerArgs << '-Xlint:unchecked'
}

jar {
  manifest {
    attributes "Main-Class": "$mainClassName"
  }

  from {
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  } {
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
  }
}

task prepareJson(dependsOn: 'build') {
  doLast {
    println "Prepare JSON for Jupyter notebook"
    println "Copy kernel.json to build/libs/json/ and replacing PATH with cpp.jar path"

    def jarLocation = new File('build/libs/cpp.jar').getAbsolutePath()
    jarLocation = jarLocation.replace("\\", "/");
    def text = new File('kernel.json').text.replace(toReplace, jarLocation)
    def folder = new File('build/libs/json')
    if (!folder.exists()) {
      println "Creating folder build/libs/json"
      folder.mkdirs()
    }

    new File('build/libs/json/kernel.json').withWriter { w ->
      w << text
    }
  }
}

task kernelInstall(dependsOn: 'prepareJson') {
  doLast {
    println "Installing 'Scala' to jupyter notebook"

    def hashStdOut = new ByteArrayOutputStream()
    def jsonFolder = new File('build/libs/json/').getAbsolutePath();
    exec {
      commandLine "jupyter",
              "kernelspec",
              "install",
              "--sys-prefix",
              "--replace",
              "--name",
              kernelIdName,
              jsonFolder;
      standardOutput = hashStdOut
    }
    println hashStdOut.toString().trim();
    println "DONE"
  }
}

jacoco {
  toolVersion = "0.7.8"
}

jacocoTestReport {
  reports {
    html.enabled = true
    xml.enabled = false
    csv.enabled = false
  }
}

task realclean
realclean.dependsOn(clean)
// should also remove
// GroovyLexer.java GroovyLexer.tokens GroovyParser.java GroovyParser.tokens
// GroovyParserBaseListener.java GroovyParserListener.java

test.finalizedBy jacocoTestReport

